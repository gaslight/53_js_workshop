Now lets try and combine these techniques...
--
var text = "";
text += "Lorem ipsum dolor sit amet consectetur adipiscing elit Etiam euismod ipsum a";
text += "convallis pulvinar dui arcu scelerisque mauris luctus consectetur felis lectus";
text += "sit amet purus In hendrerit ligula at venenatis viverra ipsum dolor tincidunt";
text += "nulla a cursus ipsum sem id felis Nunc pretium aliquam nisi a molestie";
text += "Pellentesque laoreet malesuada arcu Nullam tempor dignissim lobortis";
text += "Suspendisse sed mi augue eu imperdiet orci Cras auctor odio id augue aliquet";
text += "suscipit Pellentesque laoreet elementum mauris non ullamcorper Sed ac urna";
text += "vitae eros semper molestie Donec consectetur nunc euismod vehicula adipiscing";
text += "massa lectus consequat erat eget bibendum nunc nibh eu sapien";

var words = text.split(' ');

// For this task we want to count the occurrence of words of various lengths.
//
// Step 1: Generate key value pairs for the problem we are solving.
//         Normally this is spread across multiple machines, but for the sake
//         of simplicity we will only use one "node". Mapped should contain:
//         [[5, 'Lorem'], [5, 'ipsum'], [4, 'dolor'], ...]

var mapped = iter.map(words, function(element, index, array) {

});

// Step 2: Group the list of key value pairs by their key.
//         By using an hash as an initial value we should be able to group our
//         results in it with array values. We could also use a dedicated
//         groupBy function to perfom such a task. Grouped should contain:
//         {5: ['Lorem', 'ipsum', ...], 4: ['dolor', ...], ...}

var grouped = iter.reduce(mapped, function(previousValue, currentValue, index, array) {

}, {});

// Step 3: Reduce each group into an answer to your problem.
//         Normally this task would also be distributed, but as this is a single
//         "node" we will need to do all of them our selves.

for (var key in grouped) {
  var count = iter.reduce(  )
  console.log('Words of length ' + key + ': ' + count);
}
